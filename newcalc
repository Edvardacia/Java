package ru.geekbrains.java1.lesson9;
/**
 * Created by QuantCapital on 10.10.2016.
 */
public class Main {
    public static void main(String[] args) {
        Form5 form5 = new Form5();
    }
}

//*САМ КЛАСС*

package ru.geekbrains.java1.lesson9;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Arc2D;

/**
 * Created by QuantCapital on 12.10.2016.
 */
public class Form5 extends JFrame {

    String s;
    String s2;
    String s3;


    Boolean znplus = true;
    Boolean znminus = true;
    Boolean znumnoshenia = true;
    Boolean zndelenia = true;
    Boolean znlog = true;
    Boolean zncos = true;
    Boolean znodx = true;

    Boolean sh = true;
    Boolean post = true;
    int lastzn;

    public Form5() {


        setTitle("Calculator");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setSize(400, 600);
        setLocation(500, 400);

        JLabel j1 = new JLabel(" ");
        j1.setPreferredSize(new Dimension(100, 200)); // КАк устанавливается размерность? ПО X ничего не меняется
        j1.setOpaque(true);
        j1.setBackground(Color.GRAY);
        j1.setBorder(new LineBorder(Color.GRAY, 5));
        JPanel jp = new JPanel(new GridLayout(1, 3));
        add(j1, BorderLayout.NORTH);
        add(jp, BorderLayout.SOUTH);

        JButton jbRed = new JButton("RED");
        JButton jbGreed = new JButton("GREEN");
        JButton jbBlue = new JButton("BLUE");
        jp.add(jbRed);
        jp.add(jbGreed);
        jp.add(jbBlue);

        // СНАЧАЛА ИДУТ СТРОКИ ПОТОМ СТОЛБЦЫ
        JPanel number = new JPanel(new GridLayout(5, 5));
        number.setBorder(new LineBorder(Color.gray, 5));
        Font BigFont2 = new Font("TimesRoman", Font.BOLD, 15);

        add(number, BorderLayout.CENTER);
        JButton n1 = new JButton("<");
        JButton n2 = new JButton("CE");
        JButton n3 = new JButton("C");
        JButton n4 = new JButton("+-");
        JButton n5 = new JButton("K");
        JButton n6 = new JButton("7");
        JButton n7 = new JButton("8");
        JButton n8 = new JButton("9");
        JButton n9 = new JButton("/");
        JButton n10 = new JButton("%");
        JButton n11 = new JButton("4");
        JButton n12 = new JButton("5");
        JButton n13 = new JButton("6");
        JButton n14 = new JButton("*");
        JButton n15 = new JButton("1/x");
        JButton n16 = new JButton("1");
        JButton n17 = new JButton("2");
        JButton n18 = new JButton("3");
        JButton n19 = new JButton("-");
        JButton n20 = new JButton("ln");
        JButton n21 = new JButton("0");
        JButton n22 = new JButton(",");
        JButton n23 = new JButton("+");
        JButton n24 = new JButton("cos");
        JButton n25 = new JButton("=");

        number.add(n1);
        n1.setFont(BigFont2);

        number.add(n2);
        n2.setFont(BigFont2);

        number.add(n3);
        n3.setFont(BigFont2);

        number.add(n4);
        n4.setFont(BigFont2);

        number.add(n5);
        n5.setFont(BigFont2);

        number.add(n6);
        n5.setFont(BigFont2);

        number.add(n7);
        n7.setFont(BigFont2);

        number.add(n8);
        number.add(n9);
        number.add(n10);

        number.add(n11);
        number.add(n12);
        number.add(n13);
        number.add(n14);
        number.add(n15);

        number.add(n16);
        number.add(n17);
        number.add(n18);
        number.add(n19);
        number.add(n20);

        number.add(n21);
        number.add(n22);
        number.add(n23);
        number.add(n24);
        number.add(n25);

        Font BigFont = new Font("TimesRoman", Font.BOLD, 40);
        Font SmallFont = new Font("TimesRoman", Font.BOLD, 20);

        n16.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    j1.setFont(BigFont);
                    s = j1.getText();
                    if (sh == false) {s = ""; sh = true;}
                    if (post == false) {s = ""; post = true;}
                    j1.setText(s + "1");
                }
        });
        n17.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    j1.setFont(BigFont);
                    s = j1.getText(); // запрашивает предыдущее значение
                    if (sh == false) {s = ""; sh = true;}
                    if (post == false) {s = ""; post = true;}
                    j1.setText(s + "2");
                }
        });
        n18.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "3");
            }
        });
        n11.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "4");
            }
        });
        n12.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "5");
            }
        });
        n13.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "6");
            }
        });
        n6.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "7");
            }
        });
        n7.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "8");
            }
        });
        n8.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "9");
            }
        });
        n21.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setFont(BigFont);
                s = j1.getText(); // запрашивает предыдущее значение
                if (sh == false) {s = ""; sh = true;}
                if (post == false) {s = ""; post = true;}
                j1.setText(s + "0");
            }
        });
        n23.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                znplus = false;
                s2 = j1.getText();
                sh = false;
                if (post == false) {
                    s = Integer.toString(lastzn);
                    s = j1.getText();
                    post = true;
                }
            }
        });
        n19.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                znminus = false;
                s2 = j1.getText();
                sh = false;
                if (post == false) {
                    s = Integer.toString(lastzn);
                    s = j1.getText();
                    post = true;
                }
            }
        });
        n14.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                znumnoshenia = false;
                s2 = j1.getText();
                sh = false;
                if (post == false) {
                    s = Integer.toString(lastzn);
                    s = j1.getText();
                    post = true;
                }
            }
        });
        n9.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                zndelenia = false;
                s2 = j1.getText();
                sh = false;
                if (post == false) {
                    s = Integer.toString(lastzn);
                    s = j1.getText();
                    post = true;
                }
            }
        });
        n20.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                znlog = false;
                s2 = j1.getText();
                sh = false;
                String ss = s2.replaceAll("[^\\d]", "");
                int ss1 = Integer.valueOf(ss).intValue();
                double ss1double = (double)ss1;
                double lastzn1 = Math.log(ss1double);
                String last = Double.toString(lastzn1);
                j1.setText(last);
                post = false;
            }
        });
        n24.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                zncos = false;
                s2 = j1.getText();
                sh = false;
                String ss = s2.replaceAll("[^\\d]", "");
                int ss1 = Integer.valueOf(ss).intValue();
                double ss1double = (double)ss1;
                double lastzn1 = Math.cos(ss1double);
                String last = Double.toString(lastzn1);
                j1.setText(last);
                post = false;
            }
        });
        n15.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                znodx = false;
                s2 = j1.getText();
                sh = false;
                String ss = s2.replaceAll("[^\\d]", "");
                int ss1 = Integer.valueOf(ss).intValue();
                double ss1double = (double)ss1;
                double lastzn1 = 1/ss1double;
                String last = Double.toString(lastzn1);
                j1.setText(last);
                post = false;
            }
        });
        n25.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String ss = s2.replaceAll("[^\\d]", "");
                int ss1 = Integer.valueOf(ss).intValue();
                if (znplus == false) {
                    s3 = j1.getText();
                    String ss2 = s3.replaceAll("[^\\d]", "");
                    int ss4 = Integer.valueOf(ss2).intValue();
                    lastzn = ss1 + ss4;
                    String last = Integer.toString(lastzn);
                    j1.setText(last);
                    post = false;
                }
                if (znminus == false) {
                    s3 = j1.getText();
                    String ss2 = s3.replaceAll("[^\\d]", "");
                    int ss4 = Integer.valueOf(ss2).intValue();
                    lastzn = ss1 - ss4;
                    String last = Integer.toString(lastzn);
                    j1.setText(last);
                    post = false;
                }
                if (znumnoshenia == false) {
                    s3 = j1.getText();
                    String ss2 = s3.replaceAll("[^\\d]", "");
                    int ss4 = Integer.valueOf(ss2).intValue();
                    lastzn = ss1 * ss4;
                    String last = Integer.toString(lastzn);
                    j1.setText(last);
                    post = false;
                }
                if (zndelenia == false) {
                    double ss1double = (double)ss1;
                    s3 = j1.getText();
                    String ss2 = s3.replaceAll("[^\\d]", "");
                    double ss4 = Double.valueOf(ss2).intValue();
                    if (ss4 == 0) {
                        j1.setFont(SmallFont);
                        j1.setText("На ноль делить нельзя!");
                        post = false;
                    }
                    else {
                        double lastzn1 = ss1double / ss4;
                        String last = Double.toString(lastzn1);
                        j1.setText(last);
                        post = false;
                    }
                }
            }
        });
        jbRed.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setBackground(Color.RED);
            }
        });
        jbBlue.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setBackground(Color.BLUE);
            }
        });
        jbGreed.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                j1.setBackground(Color.GREEN);
            }
        });
        setVisible(true);
    }
}
